//1- twoSum Problem
import java.util.*;
class Solution{
    public static int[] twoSum(int[] nums, int target){

        for(int i=0; i<nums.length; i++){
            for(int j=i+1; j<nums.length; j++){
                if(nums[i]+nums[j]==target){
                    return new int[]{i,j};
                }

            }
        }
        return null;
    }
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int target=sc.nextInt();
        int[] nums=new int[n];
        for(int i=0;i<n;i++){
            nums[i]=sc.nextInt();
        }

        int indices[]=twoSum(nums,target);
        if(indices!=null && indices.length==2){
            System.out.println(indices[0]+" "+indices[1]);
        }
        else{
            System.out.println("noo");
        }
    }
}


//2-PalindromeNumber
class Solution {
    public boolean isPalindrome(int x) {
        int temp=x;
        int t=0;
        int r;
        while(x>0){
            r=x%10;
            t=t*10+r;
            x=x/10;
        }

        if(temp==t){
            return true;
        }

        return false;
    }   

}

//3-AddTwoNumbers
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy=new ListNode(0);
        ListNode curr=dummy;
        int carry=0;

        while(l1 != null || l2 != null || carry == 1){
            int sum = 0; 
            if(l1 != null){ 
                sum += l1.val;
                l1 = l1.next;
            }
            if(l2 != null){ 
                sum += l2.val;
                l2 = l2.next;
            }
            sum += carry; 
            carry = sum/10; 
            ListNode node = new ListNode(sum % 10); 
            curr.next = node; 
            curr = curr.next; 
        }
        return dummy.next; 
 
    }
}

//4-Longest Substring Without Repeating Characters
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        Set<Character> charSet = new HashSet<>();
        int maxLength = 0;
        int left = 0;
        int right = 0;
        
        while (left < n && right < n) {
            char c = s.charAt(right);
            if (!charSet.contains(c)) {
                charSet.add(c);
                maxLength = Math.max(maxLength, right - left + 1);
                right++;
            } else {
                charSet.remove(s.charAt(left));
                left++;
            }
        }
        
        return maxLength;
    }
}
