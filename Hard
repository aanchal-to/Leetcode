//1-Median of Two Sorted Arrays-Day2
import java.util.*;
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {

        List <Integer> re=new ArrayList<>();
        for(int i=0;i<nums1.length;i++){
           re.add(nums1[i]);
        }
        for(int i=0;i<nums2.length;i++){
            re.add(nums2[i]);
        }

        Collections.sort(re);

        int size=re.size();
        int mid=size/2;
        if(size%2==0){
            return (re.get(mid-1)+re.get(mid))/2.0;
        }else{
            return re.get(mid);
        }
    }   
}

//2-Regular Expression Matching-Day2
import java.util.Scanner;

public class Solution {
    public static boolean isMatch(String s, String p) {
        if (p.isEmpty()) {
            return s.isEmpty();
        }

        boolean firstMatch = (!s.isEmpty() && (s.charAt(0) == p.charAt(0) || p.charAt(0) == '.'));

        if (p.length() >= 2 && p.charAt(1) == '*') {
            return (isMatch(s, p.substring(2)) || (firstMatch && isMatch(s.substring(1), p)));
        } else {
            return firstMatch && isMatch(s.substring(1), p.substring(1));
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the string: ");
        String s = scanner.nextLine();

        System.out.print("Enter the pattern: ");
        String p = scanner.nextLine();

        boolean match = isMatch(s, p);
        System.out.println("Pattern matches string: " + match);

        scanner.close();
    }
}

//3-Merge k Sorted Lists-Day4
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
                ListNode ans = null;
        for (ListNode list : lists) {
            ans = mergeTwoLists(ans, list);
        }
        return ans;
    }

    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }
        if (l2 == null) {
            return l1;
        }
        if (l1.val < l2.val) {
            l1.next = mergeTwoLists(l1.next, l2);
            return l1;
        } else {
            l2.next = mergeTwoLists(l1, l2.next);
            return l2;
        }
    }
}

