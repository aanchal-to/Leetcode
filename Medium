//1-AddTwoNumbers-Day1
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy=new ListNode(0);
        ListNode curr=dummy;
        int carry=0;

        while(l1 != null || l2 != null || carry == 1){
            int sum = 0; 
            if(l1 != null){ 
                sum += l1.val;
                l1 = l1.next;
            }
            if(l2 != null){ 
                sum += l2.val;
                l2 = l2.next;
            }
            sum += carry; 
            carry = sum/10; 
            ListNode node = new ListNode(sum % 10); 
            curr.next = node; 
            curr = curr.next; 
        }
        return dummy.next; 
 
    }
}

//2-Longest Substring Without Repeating Characters-Day1
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        Set<Character> charSet = new HashSet<>();
        int maxLength = 0;
        int left = 0;
        int right = 0;
        
        while (left < n && right < n) {
            char c = s.charAt(right);
            if (!charSet.contains(c)) {
                charSet.add(c);
                maxLength = Math.max(maxLength, right - left + 1);
                right++;
            } else {
                charSet.remove(s.charAt(left));
                left++;
            }
        }
        
        return maxLength;
    }
}

//3-Longest Palindromic Substring-Day3
import java.util.*;
class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() < 2) {
            return s;
        }

        int start = 0;
        int maxLength = 1;

        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i); 
            int len2 = expandAroundCenter(s, i, i + 1); 

            int len = Math.max(len1, len2);
            if (len > maxLength) {
                maxLength = len;
                start = i - (len - 1) / 2;
            }
        }

        return s.substring(start, start + maxLength);
    }
    private static int expandAroundCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1;
    }

}

//4-Reverse Integer-Day3
class Solution {
    public int reverse(int x) {


        int rev=0;
        while(x!=0){
            int r=x%10;
            rev=rev*10+r;
            x=x/10;
        }
        if (rev > Integer.MAX_VALUE || rev < Integer.MIN_VALUE){
            return 0;

        } 
        
        return (int) rev;
        
    }
}

//5- Container With Most Water-Day5
class Solution {
    public int maxArea(int[] height) {
        int left = 0;
        int right = height.length - 1;
        int max = 0;
        while(left < right){
            int w = right - left;
            int h = Math.min(height[left], height[right]);
            int area = h * w;
            max = Math.max(max, area);
            if(height[left] < height[right]) left++;
            else if(height[left] > height[right]) right--;
            else {
                left++;
                right--;
            }
        }
        return max;
        
    }
}

//5-Zigzag Conversion-Day5
if (numRows == 1) {
            return s;
        }
        StringBuilder result = new StringBuilder();
        int n = s.length();
        int cycleLen = 2 * numRows - 2;
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j + i < n; j += cycleLen) {
                result.append(s.charAt(j + i));
                if (i != 0 && i != numRows - 1 && j + cycleLen - i < n) {
                    result.append(s.charAt(j + cycleLen - i));
                }
            }
        }
        return result.toString();
       
//6-String to Integer (atoi)-Day5
class Solution {
    public int myAtoi(String s) {
        int len = s.length();
        long num = 0; // Use a long variable to handle potential integer overflow
        int i = 0;

        // Skip leading whitespace characters
        while (i < len && s.charAt(i) == ' ') {
            i++;
        }

        // Check for sign (+/-) symbol
        boolean positive = true; // Default to positive
        if (i < len && (s.charAt(i) == '+' || s.charAt(i) == '-')) {
            positive = (s.charAt(i) == '+');
            i++;
        }

        // Convert consecutive digits to an integer
        while (i < len && Character.isDigit(s.charAt(i))) {
            num = num * 10 + (s.charAt(i) - '0');

            // Check for integer overflow
            if (positive && num > Integer.MAX_VALUE) {
                return Integer.MAX_VALUE;
            } else if (!positive && -num < Integer.MIN_VALUE) {
                return Integer.MIN_VALUE;
            }

            i++;
        }

        // Handle sign
        num = positive ? num : -num;

        return (int) num;
    }
}

